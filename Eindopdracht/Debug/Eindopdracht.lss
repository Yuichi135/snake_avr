
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000007e0  00000874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008b  0080010a  0080010a  0000087e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9b  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a27  00000000  00000000  0000170f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000709  00000000  00000000  00002136  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002840  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000538  00000000  00000000  00002a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000530  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003470  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	e0 c0       	rjmp	.+448    	; 0x1e6 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 39       	cpi	r26, 0x95	; 149
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	78 d2       	rcall	.+1264   	; 0x5b4 <main>
  c4:	8b c3       	rjmp	.+1814   	; 0x7dc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
Point fruit;
int snakeLength;
bool running;

void wait( int ms ) {
	for (int tms=0; tms<ms; tms++) {
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	08 c0       	rjmp	.+16     	; 0xde <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	ef ec       	ldi	r30, 0xCF	; 207
  d0:	f7 e0       	ldi	r31, 0x07	; 7
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <wait+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <wait+0x10>
  d8:	00 00       	nop
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	ac f3       	brlt	.-22     	; 0xce <wait+0x6>
		_delay_ms( 1 );
	}
}
  e4:	08 95       	ret

000000e6 <inputTimerInit>:
	} 
}

void inputTimerInit( void )
{
	OCR2 = 250; // Compare value of counter 2
  e6:	8a ef       	ldi	r24, 0xFA	; 250
  e8:	83 bd       	out	0x23, r24	; 35
	TCCR2 = 0b00001011; // Initialize T2: timer, prescaler = 64, compare output disconnected, CTC, RUN
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<7); // T2 compare match interrupt enable
  ee:	87 b7       	in	r24, 0x37	; 55
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	87 bf       	out	0x37, r24	; 55
  f4:	08 95       	ret

000000f6 <adcInit>:
}

void adcInit( void )
{
	ADMUX = 0;
  f6:	17 b8       	out	0x07, r1	; 7
	ADMUX |= 0b01000000; // Selecteer voltage selection AVCC with external capacitor at AREF pin
  f8:	87 b1       	in	r24, 0x07	; 7
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	87 b9       	out	0x07, r24	; 7
	ADMUX |= 0b00100000; // Stel ADLAR (ADC left adjust result) in op 0 dus right adjusted
  fe:	87 b1       	in	r24, 0x07	; 7
 100:	80 62       	ori	r24, 0x20	; 32
 102:	87 b9       	out	0x07, r24	; 7
	ADMUX |= 0b00000001; // Selecteer kanaal 1 (ADC1)
 104:	87 b1       	in	r24, 0x07	; 7
 106:	81 60       	ori	r24, 0x01	; 1
 108:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA = 0;
 10a:	16 b8       	out	0x06, r1	; 6
	ADCSRA |= 0b10000000; // Schakel de ADC-module in
 10c:	86 b1       	in	r24, 0x06	; 6
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	86 b9       	out	0x06, r24	; 6
	//ADCSRA |= 0b00100000; // Activeer freerun-modus
	ADCSRA |= 0b00000110; // Stel de prescaler-bits in op een prescaler van 64
 112:	86 b1       	in	r24, 0x06	; 6
 114:	86 60       	ori	r24, 0x06	; 6
 116:	86 b9       	out	0x06, r24	; 6
 118:	08 95       	ret

0000011a <init>:
}

void init() {
	DDRA = 0xFF; // Port A, B, C en D op output zetten
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 11e:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 120:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 122:	81 bb       	out	0x11, r24	; 17
	
	DDRE = 0xFF;
 124:	82 b9       	out	0x02, r24	; 2
	
	DDRF = 0x00; // PORT F voor input van ADC
 126:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	adcInit();
 12a:	e5 df       	rcall	.-54     	; 0xf6 <adcInit>
	
	inputTimerInit();
 12c:	dc df       	rcall	.-72     	; 0xe6 <inputTimerInit>
 12e:	78 94       	sei
	sei();
 130:	08 95       	ret

00000132 <readADC>:
 132:	86 b1       	in	r24, 0x06	; 6
}

int readADC() {
	ADCSRA |= BIT(6); // Start ADC conversie
 134:	80 64       	ori	r24, 0x40	; 64
 136:	86 b9       	out	0x06, r24	; 6
	
	while (ADCSRA & (1 << ADSC));
 138:	36 99       	sbic	0x06, 6	; 6
 13a:	fe cf       	rjmp	.-4      	; 0x138 <readADC+0x6>
	
	return ADCH;
 13c:	85 b1       	in	r24, 0x05	; 5
}
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	08 95       	ret

00000142 <newFruit>:
	running = true;
}

void newFruit() {
	// TODO check of het valide is
	fruit.x = (rand() % BOARD_WIDTH);
 142:	e1 d2       	rcall	.+1474   	; 0x706 <rand>
 144:	83 70       	andi	r24, 0x03	; 3
 146:	90 78       	andi	r25, 0x80	; 128
 148:	99 23       	and	r25, r25
 14a:	24 f4       	brge	.+8      	; 0x154 <newFruit+0x12>
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	8c 6f       	ori	r24, 0xFC	; 252
 150:	9f 6f       	ori	r25, 0xFF	; 255
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <fruit+0x1>
 158:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <fruit>
	fruit.y = (rand() % BOARD_HEIGHT);
 15c:	d4 d2       	rcall	.+1448   	; 0x706 <rand>
 15e:	87 70       	andi	r24, 0x07	; 7
 160:	90 78       	andi	r25, 0x80	; 128
 162:	99 23       	and	r25, r25
 164:	24 f4       	brge	.+8      	; 0x16e <newFruit+0x2c>
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	88 6f       	ori	r24, 0xF8	; 248
 16a:	9f 6f       	ori	r25, 0xFF	; 255
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <fruit+0x3>
 172:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <fruit+0x2>
 176:	08 95       	ret

00000178 <initGame>:
 178:	cf 92       	push	r12
			
		wait(delay);
	}
}

void initGame() {	
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
	Point start;
	start.x = (rand() % BOARD_WIDTH);
 180:	c2 d2       	rcall	.+1412   	; 0x706 <rand>
 182:	83 70       	andi	r24, 0x03	; 3
 184:	90 78       	andi	r25, 0x80	; 128
 186:	99 23       	and	r25, r25
 188:	04 f4       	brge	.+0      	; 0x18a <initGame+0x12>
	start.y = (rand() % BOARD_HEIGHT);
 18a:	bd d2       	rcall	.+1402   	; 0x706 <rand>
 18c:	87 70       	andi	r24, 0x07	; 7
 18e:	90 78       	andi	r25, 0x80	; 128
 190:	99 23       	and	r25, r25
 192:	04 f4       	brge	.+0      	; 0x194 <initGame+0x1c>
 194:	68 94       	set
	
	start.x = 2;
 196:	cc 24       	eor	r12, r12
 198:	c1 f8       	bld	r12, 1
 19a:	d1 2c       	mov	r13, r1
 19c:	68 94       	set
	start.y = 2;
 19e:	ee 24       	eor	r14, r14
 1a0:	e1 f8       	bld	r14, 1
 1a2:	f1 2c       	mov	r15, r1
 1a4:	c0 92 0e 01 	sts	0x010E, r12	; 0x80010e <snake>
	
	snake[0] = start;
 1a8:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <snake+0x1>
 1ac:	e0 92 10 01 	sts	0x0110, r14	; 0x800110 <snake+0x2>
 1b0:	f0 92 11 01 	sts	0x0111, r15	; 0x800111 <snake+0x3>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
	snakeLength = 1;
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <snakeLength+0x1>
 1bc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <snakeLength>
	
	newFruit();
 1c0:	c0 df       	rcall	.-128    	; 0x142 <newFruit>
 1c2:	83 e2       	ldi	r24, 0x23	; 35
	
	lastDirection = RIGHT;
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lastDirection+0x1>
 1ca:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lastDirection>
 1ce:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buttonInput+0x1>
	buttonInput = RIGHT;
 1d2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buttonInput>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
	
	running = true;
 1d8:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <running>
 1dc:	ff 90       	pop	r15
}
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	08 95       	ret

000001e6 <__vector_9>:
 1e6:	1f 92       	push	r1
		_delay_ms( 1 );
	}
}

ISR( TIMER2_COMP_vect )
{
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
	msCount++; // Increment ms counter
 20c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <msCount>
 210:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <msCount+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <msCount+0x1>
 21a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <msCount>
	ADMUX &= 0b11100000; // Verwijder output
 21e:	87 b1       	in	r24, 0x07	; 7
 220:	80 7e       	andi	r24, 0xE0	; 224
 222:	87 b9       	out	0x07, r24	; 7
	
	if ( msCount == 482 ) // Potentiometer input uitlezen
 224:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <msCount>
 228:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <msCount+0x1>
 22c:	82 3e       	cpi	r24, 0xE2	; 226
 22e:	91 40       	sbci	r25, 0x01	; 1
 230:	59 f4       	brne	.+22     	; 0x248 <__vector_9+0x62>
	{
		ADMUX |= 0b00000000; // Zet op port 0
 232:	87 b1       	in	r24, 0x07	; 7
 234:	87 b9       	out	0x07, r24	; 7
		
		gameSpeed = readADC();
 236:	7d df       	rcall	.-262    	; 0x132 <readADC>
 238:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <gameSpeed+0x1>
 23c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <gameSpeed>
		
		msCount = 0; // Reset ms_count value
 240:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <msCount+0x1>
 244:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <msCount>
	}
	
	if ( (msCount % 25) == 0) { // Buttons input uitlezen
 248:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <msCount>
 24c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <msCount+0x1>
 250:	69 e1       	ldi	r22, 0x19	; 25
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	ea d1       	rcall	.+980    	; 0x62a <__divmodhi4>
 256:	89 2b       	or	r24, r25
 258:	99 f4       	brne	.+38     	; 0x280 <__vector_9+0x9a>
		ADMUX |= 0b00000001; // Zet op port 1
 25a:	87 b1       	in	r24, 0x07	; 7
 25c:	81 60       	ori	r24, 0x01	; 1
		
		int input = readADC();
 25e:	87 b9       	out	0x07, r24	; 7
 260:	68 df       	rcall	.-304    	; 0x132 <readADC>
		if (input != NOTHING)
 262:	89 36       	cpi	r24, 0x69	; 105
 264:	91 05       	cpc	r25, r1
 266:	21 f0       	breq	.+8      	; 0x270 <__vector_9+0x8a>
			buttonInput = input;
 268:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buttonInput+0x1>
 26c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buttonInput>
			
		if (input == SELECT && running == false) {
 270:	81 34       	cpi	r24, 0x41	; 65
 272:	91 05       	cpc	r25, r1
 274:	29 f4       	brne	.+10     	; 0x280 <__vector_9+0x9a>
 276:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <running>
 27a:	81 11       	cpse	r24, r1
			initGame();
 27c:	01 c0       	rjmp	.+2      	; 0x280 <__vector_9+0x9a>
 27e:	7c df       	rcall	.-264    	; 0x178 <initGame>
		}
	} 
}
 280:	ff 91       	pop	r31
 282:	ef 91       	pop	r30
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	7f 91       	pop	r23
 28e:	6f 91       	pop	r22
 290:	5f 91       	pop	r21
 292:	4f 91       	pop	r20
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	0b be       	out	0x3b, r0	; 59
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <isValidPosition>:
	lastDirection = direction;
	
	moveSnake(lookup[offset]);
}

int isValidPosition(Point point) {
 2a6:	cf 92       	push	r12
 2a8:	df 92       	push	r13
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	6b 01       	movw	r12, r22
 2b0:	7c 01       	movw	r14, r24
	if (point.y >= BOARD_HEIGHT || point.y < 0)
 2b2:	d7 01       	movw	r26, r14
 2b4:	a8 30       	cpi	r26, 0x08	; 8
 2b6:	b1 05       	cpc	r27, r1
 2b8:	10 f5       	brcc	.+68     	; 0x2fe <isValidPosition+0x58>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	15 c0       	rjmp	.+42     	; 0x2ea <isValidPosition+0x44>
		return 0;
	
	for (int i = 1; i <= snakeLength; i++) {
		Point snakePart = snake[i];
 2c0:	fc 01       	movw	r30, r24
 2c2:	ee 0f       	add	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	e2 5f       	subi	r30, 0xF2	; 242
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	40 81       	ld	r20, Z
 2d0:	51 81       	ldd	r21, Z+1	; 0x01
 2d2:	62 81       	ldd	r22, Z+2	; 0x02
 2d4:	73 81       	ldd	r23, Z+3	; 0x03
		
		if ((snakePart.x == point.x) && (snakePart.y == point.y))
 2d6:	c4 16       	cp	r12, r20
 2d8:	d5 06       	cpc	r13, r21
 2da:	31 f4       	brne	.+12     	; 0x2e8 <isValidPosition+0x42>
 2dc:	a6 17       	cp	r26, r22
 2de:	b7 07       	cpc	r27, r23
 2e0:	19 f4       	brne	.+6      	; 0x2e8 <isValidPosition+0x42>
			return 0;
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0d c0       	rjmp	.+26     	; 0x302 <isValidPosition+0x5c>

int isValidPosition(Point point) {
	if (point.y >= BOARD_HEIGHT || point.y < 0)
		return 0;
	
	for (int i = 1; i <= snakeLength; i++) {
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <snakeLength>
 2ee:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <snakeLength+0x1>
 2f2:	28 17       	cp	r18, r24
 2f4:	39 07       	cpc	r19, r25
 2f6:	24 f7       	brge	.-56     	; 0x2c0 <isValidPosition+0x1a>
		
		if ((snakePart.x == point.x) && (snakePart.y == point.y))
			return 0;
	}
	
	return 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <isValidPosition+0x5c>
	moveSnake(lookup[offset]);
}

int isValidPosition(Point point) {
	if (point.y >= BOARD_HEIGHT || point.y < 0)
		return 0;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
		if ((snakePart.x == point.x) && (snakePart.y == point.y))
			return 0;
	}
	
	return 1;
}
 302:	ff 90       	pop	r15
 304:	ef 90       	pop	r14
 306:	df 90       	pop	r13
 308:	cf 90       	pop	r12
 30a:	08 95       	ret

0000030c <moveSnake>:

void moveSnake(Point change) {
 30c:	4f 92       	push	r4
 30e:	5f 92       	push	r5
 310:	6f 92       	push	r6
 312:	7f 92       	push	r7
 314:	8f 92       	push	r8
 316:	9f 92       	push	r9
 318:	af 92       	push	r10
 31a:	bf 92       	push	r11
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	4b 01       	movw	r8, r22
 32a:	5c 01       	movw	r10, r24
	Point head = snake[0];
 32c:	c0 90 0e 01 	lds	r12, 0x010E	; 0x80010e <snake>
 330:	d0 90 0f 01 	lds	r13, 0x010F	; 0x80010f <snake+0x1>
 334:	e0 90 10 01 	lds	r14, 0x0110	; 0x800110 <snake+0x2>
 338:	f0 90 11 01 	lds	r15, 0x0111	; 0x800111 <snake+0x3>
	
	if ((head.x == fruit.x) && (head.y == fruit.y))	{
 33c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <fruit>
 340:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <fruit+0x1>
 344:	8c 15       	cp	r24, r12
 346:	9d 05       	cpc	r25, r13
 348:	89 f4       	brne	.+34     	; 0x36c <moveSnake+0x60>
 34a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <fruit+0x2>
 34e:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <fruit+0x3>
 352:	8e 15       	cp	r24, r14
 354:	9f 05       	cpc	r25, r15
 356:	51 f4       	brne	.+20     	; 0x36c <moveSnake+0x60>
		snakeLength++;
 358:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <snakeLength>
 35c:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <snakeLength+0x1>
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <snakeLength+0x1>
 366:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <snakeLength>
		
		newFruit();
 36a:	eb de       	rcall	.-554    	; 0x142 <newFruit>
	}
	
	return 1;
}

void moveSnake(Point change) {
 36c:	8f e1       	ldi	r24, 0x1F	; 31
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	1b c0       	rjmp	.+54     	; 0x3a8 <moveSnake+0x9c>
		
		newFruit();
	}
	
	for (int i = (BOARD_WIDTH * BOARD_HEIGHT) - 1; i > 0; i--) {
		snake[i] = snake[i - 1];
 372:	9c 01       	movw	r18, r24
 374:	21 50       	subi	r18, 0x01	; 1
 376:	31 09       	sbc	r19, r1
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	fc 01       	movw	r30, r24
 382:	e2 5f       	subi	r30, 0xF2	; 242
 384:	fe 4f       	sbci	r31, 0xFE	; 254
 386:	d9 01       	movw	r26, r18
 388:	aa 0f       	add	r26, r26
 38a:	bb 1f       	adc	r27, r27
 38c:	aa 0f       	add	r26, r26
 38e:	bb 1f       	adc	r27, r27
 390:	a2 5f       	subi	r26, 0xF2	; 242
 392:	be 4f       	sbci	r27, 0xFE	; 254
 394:	8d 91       	ld	r24, X+
 396:	9d 91       	ld	r25, X+
 398:	0d 90       	ld	r0, X+
 39a:	bc 91       	ld	r27, X
 39c:	a0 2d       	mov	r26, r0
 39e:	80 83       	st	Z, r24
 3a0:	91 83       	std	Z+1, r25	; 0x01
 3a2:	a2 83       	std	Z+2, r26	; 0x02
 3a4:	b3 83       	std	Z+3, r27	; 0x03
		snakeLength++;
		
		newFruit();
	}
	
	for (int i = (BOARD_WIDTH * BOARD_HEIGHT) - 1; i > 0; i--) {
 3a6:	c9 01       	movw	r24, r18
 3a8:	18 16       	cp	r1, r24
 3aa:	19 06       	cpc	r1, r25
 3ac:	14 f3       	brlt	.-60     	; 0x372 <moveSnake+0x66>
		snake[i] = snake[i - 1];
	}
	
	Point newHead;
	newHead.x = (head.x + change.x);
 3ae:	e4 01       	movw	r28, r8
 3b0:	cc 0d       	add	r28, r12
 3b2:	dd 1d       	adc	r29, r13
 3b4:	2e 01       	movw	r4, r28
	newHead.y = (head.y + change.y);
 3b6:	ea 0c       	add	r14, r10
 3b8:	fb 1c       	adc	r15, r11
 3ba:	37 01       	movw	r6, r14
	
	if (!isValidPosition(newHead))		{
 3bc:	c3 01       	movw	r24, r6
 3be:	b2 01       	movw	r22, r4
 3c0:	72 df       	rcall	.-284    	; 0x2a6 <isValidPosition>
 3c2:	89 2b       	or	r24, r25
 3c4:	19 f4       	brne	.+6      	; 0x3cc <moveSnake+0xc0>
		running = false;
 3c6:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <running>
 3ca:	2e c0       	rjmp	.+92     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		return;
	}
	
	newHead.x = (newHead.x + BOARD_WIDTH) % BOARD_WIDTH;
 3cc:	24 96       	adiw	r28, 0x04	; 4
 3ce:	c3 70       	andi	r28, 0x03	; 3
 3d0:	d0 78       	andi	r29, 0x80	; 128
 3d2:	dd 23       	and	r29, r29
 3d4:	24 f4       	brge	.+8      	; 0x3de <moveSnake+0xd2>
 3d6:	21 97       	sbiw	r28, 0x01	; 1
 3d8:	cc 6f       	ori	r28, 0xFC	; 252
 3da:	df 6f       	ori	r29, 0xFF	; 255
 3dc:	21 96       	adiw	r28, 0x01	; 1
 3de:	2e 01       	movw	r4, r28
	newHead.y = (newHead.y + BOARD_HEIGHT) % BOARD_HEIGHT;
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	e8 0e       	add	r14, r24
 3e4:	f1 1c       	adc	r15, r1
 3e6:	87 e0       	ldi	r24, 0x07	; 7
 3e8:	e8 22       	and	r14, r24
 3ea:	80 e8       	ldi	r24, 0x80	; 128
 3ec:	f8 22       	and	r15, r24
 3ee:	ff 20       	and	r15, r15
 3f0:	54 f4       	brge	.+20     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	e8 1a       	sub	r14, r24
 3f6:	f1 08       	sbc	r15, r1
 3f8:	88 ef       	ldi	r24, 0xF8	; 248
 3fa:	e8 2a       	or	r14, r24
 3fc:	ff 24       	eor	r15, r15
 3fe:	fa 94       	dec	r15
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	e8 1a       	sub	r14, r24
 404:	f8 0a       	sbc	r15, r24
 406:	37 01       	movw	r6, r14
	
	if (isValidPosition(newHead)) {
 408:	c3 01       	movw	r24, r6
 40a:	b2 01       	movw	r22, r4
 40c:	4c df       	rcall	.-360    	; 0x2a6 <isValidPosition>
 40e:	89 2b       	or	r24, r25
 410:	49 f0       	breq	.+18     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		snake[0] = newHead;
 412:	40 92 0e 01 	sts	0x010E, r4	; 0x80010e <snake>
 416:	50 92 0f 01 	sts	0x010F, r5	; 0x80010f <snake+0x1>
 41a:	60 92 10 01 	sts	0x0110, r6	; 0x800110 <snake+0x2>
 41e:	70 92 11 01 	sts	0x0111, r7	; 0x800111 <snake+0x3>
 422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	} else {
		running = false;
 424:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <running>
	}
}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	df 90       	pop	r13
 432:	cf 90       	pop	r12
 434:	bf 90       	pop	r11
 436:	af 90       	pop	r10
 438:	9f 90       	pop	r9
 43a:	8f 90       	pop	r8
 43c:	7f 90       	pop	r7
 43e:	6f 90       	pop	r6
 440:	5f 90       	pop	r5
 442:	4f 90       	pop	r4
 444:	08 95       	ret

00000446 <update>:
	// TODO check of het valide is
	fruit.x = (rand() % BOARD_WIDTH);
	fruit.y = (rand() % BOARD_HEIGHT);
}

int update() {
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	60 97       	sbiw	r28, 0x10	; 16
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	f8 94       	cli
 454:	de bf       	out	0x3e, r29	; 62
 456:	0f be       	out	0x3f, r0	; 63
 458:	cd bf       	out	0x3d, r28	; 61
	int direction;
	if ((buttonInput == UP) || (buttonInput == RIGHT) || (buttonInput == DOWN) || (buttonInput == LEFT))
 45a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buttonInput>
 45e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buttonInput+0x1>
 462:	84 31       	cpi	r24, 0x14	; 20
 464:	91 05       	cpc	r25, r1
 466:	61 f0       	breq	.+24     	; 0x480 <update+0x3a>
 468:	83 32       	cpi	r24, 0x23	; 35
 46a:	91 05       	cpc	r25, r1
 46c:	49 f0       	breq	.+18     	; 0x480 <update+0x3a>
 46e:	87 30       	cpi	r24, 0x07	; 7
 470:	91 05       	cpc	r25, r1
 472:	31 f0       	breq	.+12     	; 0x480 <update+0x3a>
 474:	00 97       	sbiw	r24, 0x00	; 0
 476:	21 f0       	breq	.+8      	; 0x480 <update+0x3a>
		direction = buttonInput; // Volg de richting van de knoppen
	else
		direction = lastDirection; // Geen input van de knoppen
 478:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lastDirection>
 47c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lastDirection+0x1>
		
	Point lookup[4];
		
	lookup[0].x = 0; // Up
 480:	1a 82       	std	Y+2, r1	; 0x02
 482:	19 82       	std	Y+1, r1	; 0x01
	lookup[0].y = 1;
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	3c 83       	std	Y+4, r19	; 0x04
 48a:	2b 83       	std	Y+3, r18	; 0x03
	lookup[1].x = 1; // Right
 48c:	3e 83       	std	Y+6, r19	; 0x06
 48e:	2d 83       	std	Y+5, r18	; 0x05
	lookup[1].y = 0;
 490:	18 86       	std	Y+8, r1	; 0x08
 492:	1f 82       	std	Y+7, r1	; 0x07
	lookup[2].x = 0; // Down
 494:	1a 86       	std	Y+10, r1	; 0x0a
 496:	19 86       	std	Y+9, r1	; 0x09
	lookup[2].y = -1;
 498:	2f ef       	ldi	r18, 0xFF	; 255
 49a:	3f ef       	ldi	r19, 0xFF	; 255
 49c:	3c 87       	std	Y+12, r19	; 0x0c
 49e:	2b 87       	std	Y+11, r18	; 0x0b
	lookup[3].x = -1; // Left
 4a0:	3e 87       	std	Y+14, r19	; 0x0e
 4a2:	2d 87       	std	Y+13, r18	; 0x0d
	lookup[3].y = 0;
 4a4:	18 8a       	std	Y+16, r1	; 0x10
 4a6:	1f 86       	std	Y+15, r1	; 0x0f
	
	int offset;
	switch (direction) {
 4a8:	87 30       	cpi	r24, 0x07	; 7
 4aa:	91 05       	cpc	r25, r1
 4ac:	69 f0       	breq	.+26     	; 0x4c8 <update+0x82>
 4ae:	1c f4       	brge	.+6      	; 0x4b6 <update+0x70>
 4b0:	00 97       	sbiw	r24, 0x00	; 0
 4b2:	69 f0       	breq	.+26     	; 0x4ce <update+0x88>
 4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <update+0x92>
 4b6:	84 31       	cpi	r24, 0x14	; 20
 4b8:	91 05       	cpc	r25, r1
 4ba:	61 f0       	breq	.+24     	; 0x4d4 <update+0x8e>
 4bc:	83 32       	cpi	r24, 0x23	; 35
 4be:	91 05       	cpc	r25, r1
 4c0:	59 f4       	brne	.+22     	; 0x4d8 <update+0x92>
		case UP:
			offset = 0;
			break;
		case RIGHT:
			offset = 1;
 4c2:	e1 e0       	ldi	r30, 0x01	; 1
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
			break;
 4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <update+0x92>
		case DOWN:
			offset = 2;
 4c8:	e2 e0       	ldi	r30, 0x02	; 2
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
			break;
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <update+0x92>
		case LEFT:
			offset = 3;
 4ce:	e3 e0       	ldi	r30, 0x03	; 3
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
			break;
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <update+0x92>
	lookup[3].y = 0;
	
	int offset;
	switch (direction) {
		case UP:
			offset = 0;
 4d4:	e0 e0       	ldi	r30, 0x00	; 0
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
		case LEFT:
			offset = 3;
			break;
	}
	
	lastDirection = direction;
 4d8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lastDirection+0x1>
 4dc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lastDirection>
	
	moveSnake(lookup[offset]);
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	ee 0f       	add	r30, r30
 4e6:	ff 1f       	adc	r31, r31
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	8c 0f       	add	r24, r28
 4ee:	9d 1f       	adc	r25, r29
 4f0:	e8 0f       	add	r30, r24
 4f2:	f9 1f       	adc	r31, r25
 4f4:	60 81       	ld	r22, Z
 4f6:	71 81       	ldd	r23, Z+1	; 0x01
 4f8:	82 81       	ldd	r24, Z+2	; 0x02
 4fa:	93 81       	ldd	r25, Z+3	; 0x03
 4fc:	07 df       	rcall	.-498    	; 0x30c <moveSnake>
}
 4fe:	60 96       	adiw	r28, 0x10	; 16
 500:	0f b6       	in	r0, 0x3f	; 63
 502:	f8 94       	cli
 504:	de bf       	out	0x3e, r29	; 62
 506:	0f be       	out	0x3f, r0	; 63
 508:	cd bf       	out	0x3d, r28	; 61
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <drawPixel>:
	
	PORTE = aaa;
}

void drawPixel(Point point) {
	int y = (1 << point.y);
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	02 c0       	rjmp	.+4      	; 0x51a <drawPixel+0xa>
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	8a 95       	dec	r24
 51c:	e2 f7       	brpl	.-8      	; 0x516 <drawPixel+0x6>
	switch (point.x) {
 51e:	86 2f       	mov	r24, r22
 520:	97 2f       	mov	r25, r23
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	91 05       	cpc	r25, r1
 526:	71 f0       	breq	.+28     	; 0x544 <drawPixel+0x34>
 528:	1c f4       	brge	.+6      	; 0x530 <drawPixel+0x20>
 52a:	89 2b       	or	r24, r25
 52c:	39 f0       	breq	.+14     	; 0x53c <drawPixel+0x2c>
 52e:	08 95       	ret
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	91 05       	cpc	r25, r1
 534:	59 f0       	breq	.+22     	; 0x54c <drawPixel+0x3c>
 536:	03 97       	sbiw	r24, 0x03	; 3
 538:	69 f0       	breq	.+26     	; 0x554 <drawPixel+0x44>
 53a:	08 95       	ret
		case 0:
			PORTA |= y;
 53c:	8b b3       	in	r24, 0x1b	; 27
 53e:	28 2b       	or	r18, r24
 540:	2b bb       	out	0x1b, r18	; 27
			break;
 542:	08 95       	ret
		case 1:
			PORTB |= y;
 544:	88 b3       	in	r24, 0x18	; 24
 546:	28 2b       	or	r18, r24
 548:	28 bb       	out	0x18, r18	; 24
			break;
 54a:	08 95       	ret
		case 2:
			PORTC |= y;
 54c:	85 b3       	in	r24, 0x15	; 21
 54e:	28 2b       	or	r18, r24
 550:	25 bb       	out	0x15, r18	; 21
			break;
 552:	08 95       	ret
		case 3:
			PORTD |= y;
 554:	82 b3       	in	r24, 0x12	; 18
 556:	28 2b       	or	r18, r24
 558:	22 bb       	out	0x12, r18	; 18
 55a:	08 95       	ret

0000055c <drawBoard>:
	} else {
		running = false;
	}
}

void drawBoard() {
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
	// Clear alle leds.
	PORTA = 0;
 560:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0;
 562:	18 ba       	out	0x18, r1	; 24
	PORTC = 0;
 564:	15 ba       	out	0x15, r1	; 21
	PORTD = 0;
 566:	12 ba       	out	0x12, r1	; 18
	
	drawPixel(fruit);
 568:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <fruit>
 56c:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <fruit+0x1>
 570:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <fruit+0x2>
 574:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <fruit+0x3>
 578:	cb df       	rcall	.-106    	; 0x510 <drawPixel>
	
	for (int i = 0; i <= snakeLength; i++) {
 57a:	c0 e0       	ldi	r28, 0x00	; 0
 57c:	d0 e0       	ldi	r29, 0x00	; 0
 57e:	0d c0       	rjmp	.+26     	; 0x59a <drawBoard+0x3e>
		drawPixel(snake[i]);
 580:	fe 01       	movw	r30, r28
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	e2 5f       	subi	r30, 0xF2	; 242
 58c:	fe 4f       	sbci	r31, 0xFE	; 254
 58e:	60 81       	ld	r22, Z
 590:	71 81       	ldd	r23, Z+1	; 0x01
 592:	82 81       	ldd	r24, Z+2	; 0x02
 594:	93 81       	ldd	r25, Z+3	; 0x03
 596:	bc df       	rcall	.-136    	; 0x510 <drawPixel>
	PORTC = 0;
	PORTD = 0;
	
	drawPixel(fruit);
	
	for (int i = 0; i <= snakeLength; i++) {
 598:	21 96       	adiw	r28, 0x01	; 1
 59a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <snakeLength>
 59e:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <snakeLength+0x1>
 5a2:	8c 17       	cp	r24, r28
 5a4:	9d 07       	cpc	r25, r29
 5a6:	64 f7       	brge	.-40     	; 0x580 <drawBoard+0x24>
		drawPixel(snake[i]);
	}
	
	PORTE = aaa;
 5a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 5ac:	83 b9       	out	0x03, r24	; 3
}
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret

000005b4 <main>:

int aaa = 0;

int main(void)
{		
	init();
 5b4:	b2 dd       	rcall	.-1180   	; 0x11a <init>
	
	initGame();
 5b6:	e0 dd       	rcall	.-1088   	; 0x178 <initGame>
 5b8:	19 c0       	rjmp	.+50     	; 0x5ec <main+0x38>
	
	int delay;
	while (true) {
		while (running)
		{
			update();
 5ba:	45 df       	rcall	.-374    	; 0x446 <update>
 5bc:	cf df       	rcall	.-98     	; 0x55c <drawBoard>
			drawBoard();
 5be:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
			aaa++;
 5c2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 5cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 5d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameSpeed>
			
			delay = 150 + gameSpeed * 5;
 5d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <gameSpeed+0x1>
 5d8:	9c 01       	movw	r18, r24
 5da:	22 0f       	add	r18, r18
 5dc:	33 1f       	adc	r19, r19
 5de:	22 0f       	add	r18, r18
 5e0:	33 1f       	adc	r19, r19
 5e2:	82 0f       	add	r24, r18
 5e4:	93 1f       	adc	r25, r19
 5e6:	8a 56       	subi	r24, 0x6A	; 106
			wait(delay);
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	6e dd       	rcall	.-1316   	; 0xc8 <wait>
 5ec:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <running>
	
	initGame();
	
	int delay;
	while (true) {
		while (running)
 5f0:	81 11       	cpse	r24, r1
 5f2:	e3 cf       	rjmp	.-58     	; 0x5ba <main+0x6>
 5f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameSpeed>
			
			delay = 150 + gameSpeed * 5;
			wait(delay);
		}
		
		delay = 150 + gameSpeed * 5;
 5f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <gameSpeed+0x1>
 5fc:	9c 01       	movw	r18, r24
 5fe:	22 0f       	add	r18, r18
 600:	33 1f       	adc	r19, r19
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	82 0f       	add	r24, r18
 608:	93 1f       	adc	r25, r19
 60a:	2b b3       	in	r18, 0x1b	; 27
 60c:	20 95       	com	r18
			
		PORTA ^= 0xFF;
 60e:	2b bb       	out	0x1b, r18	; 27
 610:	28 b3       	in	r18, 0x18	; 24
 612:	20 95       	com	r18
		PORTB ^= 0xFF;
 614:	28 bb       	out	0x18, r18	; 24
 616:	25 b3       	in	r18, 0x15	; 21
 618:	20 95       	com	r18
		PORTC ^= 0xFF;
 61a:	25 bb       	out	0x15, r18	; 21
 61c:	22 b3       	in	r18, 0x12	; 18
 61e:	20 95       	com	r18
		PORTD ^= 0xFF;
 620:	22 bb       	out	0x12, r18	; 18
 622:	8a 56       	subi	r24, 0x6A	; 106
			
		wait(delay);
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	50 dd       	rcall	.-1376   	; 0xc8 <wait>
 628:	e1 cf       	rjmp	.-62     	; 0x5ec <main+0x38>

0000062a <__divmodhi4>:
 62a:	97 fb       	bst	r25, 7
	}
 62c:	07 2e       	mov	r0, r23
 62e:	16 f4       	brtc	.+4      	; 0x634 <__divmodhi4+0xa>
 630:	00 94       	com	r0
 632:	06 d0       	rcall	.+12     	; 0x640 <__divmodhi4_neg1>
 634:	77 fd       	sbrc	r23, 7
 636:	08 d0       	rcall	.+16     	; 0x648 <__divmodhi4_neg2>
 638:	0b d0       	rcall	.+22     	; 0x650 <__udivmodhi4>
 63a:	07 fc       	sbrc	r0, 7
 63c:	05 d0       	rcall	.+10     	; 0x648 <__divmodhi4_neg2>
 63e:	3e f4       	brtc	.+14     	; 0x64e <__divmodhi4_exit>

00000640 <__divmodhi4_neg1>:
 640:	90 95       	com	r25
 642:	81 95       	neg	r24
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	08 95       	ret

00000648 <__divmodhi4_neg2>:
 648:	70 95       	com	r23
 64a:	61 95       	neg	r22
 64c:	7f 4f       	sbci	r23, 0xFF	; 255

0000064e <__divmodhi4_exit>:
 64e:	08 95       	ret

00000650 <__udivmodhi4>:
 650:	aa 1b       	sub	r26, r26
 652:	bb 1b       	sub	r27, r27
 654:	51 e1       	ldi	r21, 0x11	; 17
 656:	07 c0       	rjmp	.+14     	; 0x666 <__udivmodhi4_ep>

00000658 <__udivmodhi4_loop>:
 658:	aa 1f       	adc	r26, r26
 65a:	bb 1f       	adc	r27, r27
 65c:	a6 17       	cp	r26, r22
 65e:	b7 07       	cpc	r27, r23
 660:	10 f0       	brcs	.+4      	; 0x666 <__udivmodhi4_ep>
 662:	a6 1b       	sub	r26, r22
 664:	b7 0b       	sbc	r27, r23

00000666 <__udivmodhi4_ep>:
 666:	88 1f       	adc	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	5a 95       	dec	r21
 66c:	a9 f7       	brne	.-22     	; 0x658 <__udivmodhi4_loop>
 66e:	80 95       	com	r24
 670:	90 95       	com	r25
 672:	bc 01       	movw	r22, r24
 674:	cd 01       	movw	r24, r26
 676:	08 95       	ret

00000678 <do_rand>:
 678:	8f 92       	push	r8
 67a:	9f 92       	push	r9
 67c:	af 92       	push	r10
 67e:	bf 92       	push	r11
 680:	cf 92       	push	r12
 682:	df 92       	push	r13
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	ec 01       	movw	r28, r24
 68e:	68 81       	ld	r22, Y
 690:	79 81       	ldd	r23, Y+1	; 0x01
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	9b 81       	ldd	r25, Y+3	; 0x03
 696:	61 15       	cp	r22, r1
 698:	71 05       	cpc	r23, r1
 69a:	81 05       	cpc	r24, r1
 69c:	91 05       	cpc	r25, r1
 69e:	21 f4       	brne	.+8      	; 0x6a8 <do_rand+0x30>
 6a0:	64 e2       	ldi	r22, 0x24	; 36
 6a2:	79 ed       	ldi	r23, 0xD9	; 217
 6a4:	8b e5       	ldi	r24, 0x5B	; 91
 6a6:	97 e0       	ldi	r25, 0x07	; 7
 6a8:	2d e1       	ldi	r18, 0x1D	; 29
 6aa:	33 ef       	ldi	r19, 0xF3	; 243
 6ac:	41 e0       	ldi	r20, 0x01	; 1
 6ae:	50 e0       	ldi	r21, 0x00	; 0
 6b0:	38 d0       	rcall	.+112    	; 0x722 <__divmodsi4>
 6b2:	49 01       	movw	r8, r18
 6b4:	5a 01       	movw	r10, r20
 6b6:	9b 01       	movw	r18, r22
 6b8:	ac 01       	movw	r20, r24
 6ba:	a7 ea       	ldi	r26, 0xA7	; 167
 6bc:	b1 e4       	ldi	r27, 0x41	; 65
 6be:	4d d0       	rcall	.+154    	; 0x75a <__muluhisi3>
 6c0:	6b 01       	movw	r12, r22
 6c2:	7c 01       	movw	r14, r24
 6c4:	ac ee       	ldi	r26, 0xEC	; 236
 6c6:	b4 ef       	ldi	r27, 0xF4	; 244
 6c8:	a5 01       	movw	r20, r10
 6ca:	94 01       	movw	r18, r8
 6cc:	52 d0       	rcall	.+164    	; 0x772 <__mulohisi3>
 6ce:	dc 01       	movw	r26, r24
 6d0:	cb 01       	movw	r24, r22
 6d2:	8c 0d       	add	r24, r12
 6d4:	9d 1d       	adc	r25, r13
 6d6:	ae 1d       	adc	r26, r14
 6d8:	bf 1d       	adc	r27, r15
 6da:	b7 ff       	sbrs	r27, 7
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <do_rand+0x6c>
 6de:	01 97       	sbiw	r24, 0x01	; 1
 6e0:	a1 09       	sbc	r26, r1
 6e2:	b0 48       	sbci	r27, 0x80	; 128
 6e4:	88 83       	st	Y, r24
 6e6:	99 83       	std	Y+1, r25	; 0x01
 6e8:	aa 83       	std	Y+2, r26	; 0x02
 6ea:	bb 83       	std	Y+3, r27	; 0x03
 6ec:	9f 77       	andi	r25, 0x7F	; 127
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	ff 90       	pop	r15
 6f4:	ef 90       	pop	r14
 6f6:	df 90       	pop	r13
 6f8:	cf 90       	pop	r12
 6fa:	bf 90       	pop	r11
 6fc:	af 90       	pop	r10
 6fe:	9f 90       	pop	r9
 700:	8f 90       	pop	r8
 702:	08 95       	ret

00000704 <rand_r>:
 704:	b9 cf       	rjmp	.-142    	; 0x678 <do_rand>

00000706 <rand>:
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	b6 cf       	rjmp	.-148    	; 0x678 <do_rand>

0000070c <srand>:
 70c:	a0 e0       	ldi	r26, 0x00	; 0
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 714:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 718:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 71c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 720:	08 95       	ret

00000722 <__divmodsi4>:
 722:	05 2e       	mov	r0, r21
 724:	97 fb       	bst	r25, 7
 726:	16 f4       	brtc	.+4      	; 0x72c <__divmodsi4+0xa>
 728:	00 94       	com	r0
 72a:	0f d0       	rcall	.+30     	; 0x74a <__negsi2>
 72c:	57 fd       	sbrc	r21, 7
 72e:	05 d0       	rcall	.+10     	; 0x73a <__divmodsi4_neg2>
 730:	24 d0       	rcall	.+72     	; 0x77a <__udivmodsi4>
 732:	07 fc       	sbrc	r0, 7
 734:	02 d0       	rcall	.+4      	; 0x73a <__divmodsi4_neg2>
 736:	46 f4       	brtc	.+16     	; 0x748 <__divmodsi4_exit>
 738:	08 c0       	rjmp	.+16     	; 0x74a <__negsi2>

0000073a <__divmodsi4_neg2>:
 73a:	50 95       	com	r21
 73c:	40 95       	com	r20
 73e:	30 95       	com	r19
 740:	21 95       	neg	r18
 742:	3f 4f       	sbci	r19, 0xFF	; 255
 744:	4f 4f       	sbci	r20, 0xFF	; 255
 746:	5f 4f       	sbci	r21, 0xFF	; 255

00000748 <__divmodsi4_exit>:
 748:	08 95       	ret

0000074a <__negsi2>:
 74a:	90 95       	com	r25
 74c:	80 95       	com	r24
 74e:	70 95       	com	r23
 750:	61 95       	neg	r22
 752:	7f 4f       	sbci	r23, 0xFF	; 255
 754:	8f 4f       	sbci	r24, 0xFF	; 255
 756:	9f 4f       	sbci	r25, 0xFF	; 255
 758:	08 95       	ret

0000075a <__muluhisi3>:
 75a:	31 d0       	rcall	.+98     	; 0x7be <__umulhisi3>
 75c:	a5 9f       	mul	r26, r21
 75e:	90 0d       	add	r25, r0
 760:	b4 9f       	mul	r27, r20
 762:	90 0d       	add	r25, r0
 764:	a4 9f       	mul	r26, r20
 766:	80 0d       	add	r24, r0
 768:	91 1d       	adc	r25, r1
 76a:	11 24       	eor	r1, r1
 76c:	08 95       	ret

0000076e <__mulshisi3>:
 76e:	b7 ff       	sbrs	r27, 7
 770:	f4 cf       	rjmp	.-24     	; 0x75a <__muluhisi3>

00000772 <__mulohisi3>:
 772:	f3 df       	rcall	.-26     	; 0x75a <__muluhisi3>
 774:	82 1b       	sub	r24, r18
 776:	93 0b       	sbc	r25, r19
 778:	08 95       	ret

0000077a <__udivmodsi4>:
 77a:	a1 e2       	ldi	r26, 0x21	; 33
 77c:	1a 2e       	mov	r1, r26
 77e:	aa 1b       	sub	r26, r26
 780:	bb 1b       	sub	r27, r27
 782:	fd 01       	movw	r30, r26
 784:	0d c0       	rjmp	.+26     	; 0x7a0 <__udivmodsi4_ep>

00000786 <__udivmodsi4_loop>:
 786:	aa 1f       	adc	r26, r26
 788:	bb 1f       	adc	r27, r27
 78a:	ee 1f       	adc	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	a2 17       	cp	r26, r18
 790:	b3 07       	cpc	r27, r19
 792:	e4 07       	cpc	r30, r20
 794:	f5 07       	cpc	r31, r21
 796:	20 f0       	brcs	.+8      	; 0x7a0 <__udivmodsi4_ep>
 798:	a2 1b       	sub	r26, r18
 79a:	b3 0b       	sbc	r27, r19
 79c:	e4 0b       	sbc	r30, r20
 79e:	f5 0b       	sbc	r31, r21

000007a0 <__udivmodsi4_ep>:
 7a0:	66 1f       	adc	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	1a 94       	dec	r1
 7aa:	69 f7       	brne	.-38     	; 0x786 <__udivmodsi4_loop>
 7ac:	60 95       	com	r22
 7ae:	70 95       	com	r23
 7b0:	80 95       	com	r24
 7b2:	90 95       	com	r25
 7b4:	9b 01       	movw	r18, r22
 7b6:	ac 01       	movw	r20, r24
 7b8:	bd 01       	movw	r22, r26
 7ba:	cf 01       	movw	r24, r30
 7bc:	08 95       	ret

000007be <__umulhisi3>:
 7be:	a2 9f       	mul	r26, r18
 7c0:	b0 01       	movw	r22, r0
 7c2:	b3 9f       	mul	r27, r19
 7c4:	c0 01       	movw	r24, r0
 7c6:	a3 9f       	mul	r26, r19
 7c8:	70 0d       	add	r23, r0
 7ca:	81 1d       	adc	r24, r1
 7cc:	11 24       	eor	r1, r1
 7ce:	91 1d       	adc	r25, r1
 7d0:	b2 9f       	mul	r27, r18
 7d2:	70 0d       	add	r23, r0
 7d4:	81 1d       	adc	r24, r1
 7d6:	11 24       	eor	r1, r1
 7d8:	91 1d       	adc	r25, r1
 7da:	08 95       	ret

000007dc <_exit>:
 7dc:	f8 94       	cli

000007de <__stop_program>:
 7de:	ff cf       	rjmp	.-2      	; 0x7de <__stop_program>
